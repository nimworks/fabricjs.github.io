{"componentChunkName":"component---src-templates-demo-jsx","path":"/demo/custom-controls-polygon","result":{"data":{"demoPage":{"html":"<p>This demo shows how to use the controls api to do something like changing the shape of a polygon.\nThis is generally harder to grasp because require understanding the internal polygon logic,\nanchor points and transformations.</p>\n<p>In the demo the canvas has zoom and translation, so we are sure our code is generic enough.\nThe polygon is given some big strokeWidth for the same reason.</p>\n<p>We have a function that trigger the <code class=\"language-none\">edit mode</code>.\nWhen we enter in edit mode we create one new control for each polygon point.\nTo those controls we attach a property, called point index, to remember to which point they are bound to.</p>\n<p>Those controls use their own custo position handler: <code class=\"language-none\">polygonPositionHandler</code>. This function\nlook at the pointIndex of the control and return the current canvas position for that particular point.\nIn this way interaction and rendering are done.</p>\n<p>To make the actual control change the current point, we need to write a custom action handler.</p>\n<p>Changing a point position is actually easy:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">fabricObject<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span>\nfabricObject<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The hard part is handling the object that change dimensions while mantaining the correct position.</p>\n<p>We need an anchor point. We choose to fix the polygon position on the actual position of any point of the points array that is not the one that we are dragging.</p>\n<p>So having chosen the point, we calculate its actual absolute position:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> absolutePoint <span class=\"token operator\">=</span> fabric<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span><span class=\"token function\">transformPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    x<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>fabricObject<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">[</span>anchorIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> fabricObject<span class=\"token punctuation\">.</span>pathOffset<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>fabricObject<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">[</span>anchorIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> fabricObject<span class=\"token punctuation\">.</span>pathOffset<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> fabricObject<span class=\"token punctuation\">.</span><span class=\"token function\">calcTransformMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We will use this absolute position after we have modified the polygon.</p>\n<p>Then we swap the dragged point with the new one, we recalculate the width/height and pathOffset of the polygon ( basically we reinitialize its dimensions ).</p>\n<p>Now to keep its position steady, we want to know the point that represent the anchor point, in what position is now relative to polygon size.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> newX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fabricObject<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">[</span>anchorIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> fabricObject<span class=\"token punctuation\">.</span>pathOffset<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> fabricObject<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span>\n    newY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fabricObject<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">[</span>anchorIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> fabricObject<span class=\"token punctuation\">.</span>pathOffset<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> fabricObject<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now newX and newY represent the point position with a range from -0.5 to 0.5 for X and Y.\nFabric supports numeric origins for objects with a range from 0 to 1. This let us use the relative position as an origin to translate the old absolutePoint we find before.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">fabricObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPositionByOrigin</span><span class=\"token punctuation\">(</span>absolutePoint<span class=\"token punctuation\">,</span> newX <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> newY <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"creating-the-control\" style=\"position:relative;\">Creating the control<a href=\"#creating-the-control\" aria-label=\"creating the control permalink\" class=\"anchor after\"></a></h2>\n<div\n  class=\"codepen-later\"\n  data-editable=\"true\"\n  data-height=\"600\"\n  data-default-tab=\"result\"\n  data-prefill='{\n    \"scripts\": \"https://unpkg.com/fabric@4.0.0-rc.1/dist/fabric.js\"\n  }'\n>\n<pre data-lang=\"css\" data-options-autoprefixer=\"true\">\n  .controls {\n  \tdisplay: inline-block;\n  }\n</pre>\n<pre data-lang=\"html\">\n  <div class=\"controls\">\n    <p>\n      <button id=\"edit\" onclick=\"Edit()\">Toggle editing polygon</button>\n    </p>\n  </div>\n  <canvas id=\"c\" width=\"500\" height=\"400\" style=\"border:1px solid #ccc\"></canvas>\n</pre>\n<pre data-lang=\"js\">\n\tvar canvas = this.__canvas = new fabric.Canvas('c');\n\t// create a polygon object\n\tvar points = [{\n\t\tx: 3, y: 4\n\t}, {\n\t\tx: 16, y: 3\n\t}, {\n\t\tx: 30, y: 5\n\t},  {\n\t\tx: 25, y: 55\n\t}, {\n\t\tx: 19, y: 44\n\t}, {\n\t\tx: 15, y: 30\n\t}, {\n\t\tx: 15, y: 55\n\t}, {\n\t\tx: 9, y: 55\n\t}, {\n\t\tx: 6, y: 53\n\t}, {\n\t\tx: -2, y: 55\n\t}, {\n\t\tx: -4, y: 40\n\t}, {\n\t\tx: 0, y: 20\n\t}]\n\tvar polygon = new fabric.Polygon(points, {\n\t\tleft: 100,\n\t\ttop: 50,\n\t\tfill: '#D81B60',\n\t\tstrokeWidth: 4,\n    stroke: 'green',\n\t\tscaleX: 4,\n\t\tscaleY: 4,\n\t\tobjectCaching: false,\n\t\ttransparentCorners: false,\n\t\tcornerColor: 'blue',\n\t});\n  canvas.viewportTransform = [0.7, 0, 0, 0.7, -50, 50];\n\tcanvas.add(polygon);\n\n\t// define a function that can locate the controls.\n\t// this function will be used both for drawing and for interaction.\n\tfunction polygonPositionHandler(dim, finalMatrix, fabricObject) {\n\t  var x = (fabricObject.points[this.pointIndex].x - fabricObject.pathOffset.x),\n\t\t    y = (fabricObject.points[this.pointIndex].y - fabricObject.pathOffset.y);\n\t\treturn fabric.util.transformPoint(\n\t\t\t{ x: x, y: y },\n      fabric.util.multiplyTransformMatrices(\n        fabricObject.canvas.viewportTransform,\n        fabricObject.calcTransformMatrix()\n      )\n\t\t);\n\t}\n\n\t// define a function that will define what the control does\n\t// this function will be called on every mouse move after a control has been\n\t// clicked and is being dragged.\n\t// The function receive as argument the mouse event, the current trasnform object\n\t// and the current position in canvas coordinate\n\t// transform.target is a reference to the current object being transformed,\n\tfunction actionHandler(eventData, transform, x, y) {\n\t\tvar polygon = transform.target,\n\t\t    currentControl = polygon.controls[polygon.__corner],\n\t\t    mouseLocalPosition = polygon.toLocalPoint(new fabric.Point(x, y), 'center', 'center'),\n        polygonBaseSize = polygon._getNonTransformedDimensions(),\n\t\t\t\tsize = polygon._getTransformedDimensions(0, 0),\n\t\t\t\tfinalPointPosition = {\n\t\t\t\t\tx: mouseLocalPosition.x * polygonBaseSize.x / size.x + polygon.pathOffset.x,\n\t\t\t\t\ty: mouseLocalPosition.y * polygonBaseSize.y / size.y + polygon.pathOffset.y\n\t\t\t\t};\n\t\tpolygon.points[currentControl.pointIndex] = finalPointPosition;\n\t\treturn true;\n\t}\n\n  // define a function that can keep the polygon in the same position when we change its\n  // width/height/top/left.\n  function anchorWrapper(anchorIndex, fn) {\n    return function(eventData, transform, x, y) {\n      var fabricObject = transform.target,\n          absolutePoint = fabric.util.transformPoint({\n              x: (fabricObject.points[anchorIndex].x - fabricObject.pathOffset.x),\n              y: (fabricObject.points[anchorIndex].y - fabricObject.pathOffset.y),\n          }, fabricObject.calcTransformMatrix()),\n          actionPerformed = fn(eventData, transform, x, y),\n          newDim = fabricObject._setPositionDimensions({}),\n          polygonBaseSize = fabricObject._getNonTransformedDimensions(),\n          newX = (fabricObject.points[anchorIndex].x - fabricObject.pathOffset.x) / polygonBaseSize.x,\n  \t\t    newY = (fabricObject.points[anchorIndex].y - fabricObject.pathOffset.y) / polygonBaseSize.y;\n      fabricObject.setPositionByOrigin(absolutePoint, newX + 0.5, newY + 0.5);\n      return actionPerformed;\n    }\n  }\n\n\tfunction Edit() {\n\t\t// clone what are you copying since you\n\t\t// may want copy and paste on different moment.\n\t\t// and you do not want the changes happened\n\t\t// later to reflect on the copy.\n\t\tvar poly = canvas.getObjects()[0];\n\t\tcanvas.setActiveObject(poly);\n\t\tpoly.edit = !poly.edit;\n\t\tif (poly.edit) {\n      var lastControl = poly.points.length - 1;\n      poly.cornerStyle = 'circle';\n      poly.cornerColor = 'rgba(0,0,255,0.5)';\n\t    poly.controls = poly.points.reduce(function(acc, point, index) {\n\t\t\t\tacc['p' + index] = new fabric.Control({\n\t\t\t\t\tpositionHandler: polygonPositionHandler,\n\t\t\t\t\tactionHandler: anchorWrapper(index > 0 ? index - 1 : lastControl, actionHandler),\n\t\t\t\t\tactionName: 'modifyPoligon',\n\t\t\t\t\tpointIndex: index\n\t\t\t\t});\n\t\t\t\treturn acc;\n\t\t\t}, { });\n\t\t} else {\n      poly.cornerColor = 'blue';\n      poly.cornerStyle = 'rect';\n\t\t\tpoly.controls = fabric.Object.prototype.controls;\n\t\t}\n\t\tpoly.hasBorders = !poly.edit;\n\t\tcanvas.requestRenderAll();\n\t}\n</pre>\n</div>","frontmatter":{"title":"Custom controls for polygon"},"mdFile":{"__typename":"File","relativePath":"demo/custom-controls-polygon/index.md"}}},"pageContext":{"slug":"/demo/custom-controls-polygon","prev":{"title":"Custom controls","slug":"/demo/custom-controls"},"next":{"title":"Events inspector","slug":"/demo/events-inspector"}}}}