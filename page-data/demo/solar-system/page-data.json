{"componentChunkName":"component---src-templates-demo-jsx","path":"/demo/solar-system","result":{"data":{"demoPage":{"html":"<div\n  class=\"codepen-later\"\n  data-editable=\"true\"\n  data-height=\"500\"\n  data-default-tab=\"result\"\n  data-prefill='{\n    \"scripts\": [\"https://unpkg.com/fabric@4.0.0-rc.1/dist/fabric.js\"]\n  }'\n>\n<pre data-lang=\"css\" data-options-autoprefixer=\"true\">\n.canvas-container { background: url('http://www.fabricjs.com/assets/sky.png'); }\n#bd-wrapper { min-width: 1600px; }\n</pre>\n<pre data-lang=\"html\">\n  <p>Adaptation of <a href=\"http://habrahabr.ru/post/163893\">LibCanvas demo</a></p>\n  <canvas id=\"c\" width=\"840\" height=\"840\" style=\"border:1px solid #aaa\"></canvas>\n</pre>\n<pre data-lang=\"js\">\n(function() {\n\tfabric.Object.prototype.originX = fabric.Object.prototype.originY = 'center';\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var canvas = this.__canvas = new fabric.Canvas(&#39;c&#39;, {\n\thoverCursor: &#39;pointer&#39;,\n\tselection: false,\n\tperPixelTargetFind: true,\n\ttargetFindTolerance: 5\n});\n\n// load sun and center it\nfabric.Image.fromURL(&#39;http://www.fabricjs.com/assets/sun.png&#39;, function(sunImg) {\n\tcanvas.add(sunImg);\n\tsunImg.center();\n});\n\nvar planetSize = 26,\n\ttotalPlanets = 12,\n\trotationSpeed = 20000,\n\torbits = [],\n\tplanets = [],\n\tplanetNames = [&#39;Selene&#39;, &#39;Mimas&#39;, &#39;Ares&#39;, &#39;Enceladus&#39;, &#39;Tethys&#39;, &#39;Dione&#39;,\n\t\t&#39;Zeus&#39;, &#39;Rhea&#39;, &#39;Titan&#39;, &#39;Janus&#39;, &#39;Hyperion&#39;, &#39;Iapetus&#39;\n\t];\n\nvar hoverCircle = new fabric.Circle({\n\tradius: 13,\n\tfill: &#39;#000&#39;,\n\tstroke: &#39;rgb(0,192,255)&#39;,\n\tstrokeWidth: 3,\n\tleft: -100,\n\ttop: -100\n});\n\nvar planetLabel = new fabric.Text(&#39;&#39;, {\n\tfill: &#39;#fff&#39;,\n\tfontSize: 16,\n\tfontFamily: &#39;Open Sans&#39;,\n\ttextBackgroundColor: &#39;#002244&#39;\n});\n\n// load sprite with planets\nfabric.Image.fromURL(&#39;http://fabricjs.github.io/assets/planets.png&#39;, function(planetsImg) {\n\n\t// temp canvas to generate planet images\n\tvar tempCanvas = new fabric.StaticCanvas();\n\n\t// only to fit one planet onto temp canvas\n\ttempCanvas.setDimensions({\n\t\twidth: planetSize,\n\t\theight: planetSize\n\t});\n\n\t// make sure image is drawn from left/top corner\n\tplanetsImg.originX = &#39;left&#39;;\n\tplanetsImg.originY = &#39;top&#39;;\n\n\t// add it onto temp canvas\n\ttempCanvas.add(planetsImg);\n\n\tfor (var i = 0; i &lt; totalPlanets; i++) {\n\t\tcreateOrbit(i);\n\t}\n\tcanvas.add(hoverCircle);\n\n\tfor (var i = 0; i &lt; totalPlanets; i++) {\n\t\tcreatePlanet(i, planetsImg, tempCanvas);\n\t}\n\n\tcanvas.add(planetLabel);\n}, { crossOrigin: &#39;anonymous&#39; });\n\nfunction createOrbit(i) {\n\tvar orbit = new fabric.Circle({\n\t\tradius: 26 * i + 90,\n\t\tleft: canvas.getWidth() / 2,\n\t\ttop: canvas.getHeight() / 2,\n\t\tfill: &#39;&#39;,\n\t\tstroke: &#39;rgba(0,192,255,0.5)&#39;,\n\t\thasBorders: false,\n\t\thasControls: false,\n\t\tlockMovementX: true,\n\t\tlockMovementY: true,\n\t\tindex: i\n\t});\n\tcanvas.add(orbit);\n\torbits.push(orbit);\n}\n\nfunction createPlanet(i, planetsImg, tempCanvas) {\n\n\t// offset planets sprite to fit each of the planets onto it\n\tplanetsImg.left = -planetSize * i;\n\tplanetsImg.setCoords();\n\ttempCanvas.renderAll();\n\n\t// get data url for that planet\n\tvar img = new Image();\n\timg.onload = function() {\n\t\t// create image of a planet from data url\n\t\tvar oImg = new fabric.Image(img, {\n\n\t\t\tname: planetNames[i],\n\t\t\tindex: i,\n\t\t\tscaleX: 1 / canvas.getRetinaScaling(),\n\t\t\tscaleY: 1 / canvas.getRetinaScaling(),\n\t\t\t// position planet 90px from canvas center and 26px from previous planet\n\t\t\tleft: (canvas.getWidth() / 2) - 90 - (planetSize * i),\n\t\t\ttop: canvas.getHeight() / 2,\n\n\t\t\t// remove borders and corners but leaving object available for events\n\t\t\thasBorders: false,\n\t\t\thasControls: false\n\t\t});\n\t\tcanvas.add(oImg);\n\t\tplanets.push(oImg);\n\t\tanimatePlanet(oImg, i);\n\t}\n\timg.src = tempCanvas.toDataURL();\n}\n\nfunction animatePlanet(oImg, planetIndex) {\n\n\tvar radius = planetIndex * 26 + 90,\n\n\t\t// rotate around canvas center\n\t\tcx = canvas.getWidth() / 2,\n\t\tcy = canvas.getHeight() / 2,\n\n\t\t// speed of rotation slows down for further planets\n\t\tduration = (planetIndex + 1) * rotationSpeed,\n\n\t\t// randomize starting angle to avoid planets starting on one line\n\t\tstartAngle = fabric.util.getRandomInt(-180, 0),\n\t\tendAngle = startAngle + 359;\n\n\t(function animate() {\n\n\t\tfabric.util.animate({\n\t\t\tstartValue: startAngle,\n\t\t\tendValue: endAngle,\n\t\t\tduration: duration,\n\n\t\t\t// linear movement\n\t\t\teasing: function(t, b, c, d) {\n\t\t\t\treturn c * t / d + b;\n\t\t\t},\n\n\t\t\tonChange: function(angle) {\n\t\t\t\tangle = fabric.util.degreesToRadians(angle);\n\n\t\t\t\tvar x = cx + radius * Math.cos(angle);\n\t\t\t\tvar y = cy + radius * Math.sin(angle);\n\n\t\t\t\toImg.set({\n\t\t\t\t\tleft: x,\n\t\t\t\t\ttop: y\n\t\t\t\t}).setCoords();\n\n\t\t\t\t// only render once\n\t\t\t\tif (planetIndex === totalPlanets - 1) {\n\t\t\t\t\tcanvas.renderAll();\n\t\t\t\t}\n\t\t\t},\n\t\t\tonComplete: animate\n\t\t});\n\t})();\n}\n\nvar hoverTarget, prevHoverTarget;\n\ncanvas.on(&#39;mouse:over&#39;, function(options) {\n\thoverTarget = options.target;\n});\n\ncanvas.on(&#39;mouse:out&#39;, function(options) {\n\thoverTarget = null;\n\tprevHoverTarget = options.target;\n});\n\ncanvas.on(&#39;after:render&#39;, function() {\n\torbits.forEach(function(orbit) {\n\t\torbit.strokeWidth = 1;\n\t\torbit.stroke = &#39;rgba(0,192,255,0.5)&#39;;\n\t});\n\tif (hoverTarget &amp;&amp; !hoverTarget.text) {\n\t\tvar hoveredPlanet = planets[hoverTarget.index];\n\t\tvar hoveredOrbit = orbits[hoveredPlanet.index];\n\n\t\thoveredOrbit.set({\n\t\t\tstrokeWidth: 3,\n\t\t\tstroke: &#39;rgb(0,192,255)&#39;\n\t\t});\n\n\t\thoverCircle.set({\n\t\t\tleft: hoveredPlanet.left,\n\t\t\ttop: hoveredPlanet.top\n\t\t});\n\n\t\tplanetLabel.set({\n\t\t\tleft: hoveredPlanet.left + 50,\n\t\t\ttop: hoveredPlanet.top + 20,\n\t\t\ttext: hoveredPlanet.name\n\t\t});\n\t} else {\n\t\thoverCircle.set({\n\t\t\tleft: -100,\n\t\t\ttop: -100\n\t\t});\n\t\tplanetLabel.set({\n\t\t\tleft: -100,\n\t\t\ttop: -100\n\t\t});\n\t}\n});</code></pre></div>\n<p>})();</p>\n</pre>\n</div>","frontmatter":{"title":"Solar system"},"mdFile":{"__typename":"File","relativePath":"demo/solar-system/index.md"}}},"pageContext":{"slug":"/demo/solar-system","prev":{"title":"Matrix transformations","slug":"/demo/matrix-transformation"},"next":{"title":"Stroke uniform property","slug":"/demo/stroke-uniform-property"}}}}